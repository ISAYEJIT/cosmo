from django.shortcuts import render, redirect
from django.http import JsonResponse
from django.contrib import messages
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.contrib.auth.decorators import user_passes_test
from django.core.paginator import Paginator
from django.utils import timezone
from datetime import datetime
import asyncio
import requests
from utils.proxy_utils import proxy_manager, make_request_with_proxy
from utils.translation import translate_space_weather_text
from ..models import SpaceWeatherAlert, TypeTRadioAlert, TypeKGeomagneticAlert, TypeEElectronAlert, TypeAForecastAlert
from ..views.noaa_views import parse_alert_message, save_alert_to_db


def check_admin_password(user):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    return True  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã


@user_passes_test(check_admin_password)
def admin_alerts_view(request):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    if request.method == 'POST' and request.POST.get('action') == 'check_password':
        entered_password = request.POST.get('admin_password', '')
        if entered_password == '12345':
            request.session['admin_authenticated'] = True
            return redirect('admin_alerts')
        else:
            from django.contrib import messages
            messages.error(request, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.')
            return redirect('admin_alerts')
    
    # –ï—Å–ª–∏ –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
    if not request.session.get('admin_authenticated', False):
        return render(request, 'admin_password.html', {
            'page_title': '–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'
        })
    
    # –ü–æ–¥—Å—á–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    total_alerts = (
        SpaceWeatherAlert.objects.count() +
        TypeTRadioAlert.objects.count() +
        TypeKGeomagneticAlert.objects.count() +
        TypeEElectronAlert.objects.count() +
        TypeAForecastAlert.objects.count()
    )
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã (—Å —É—á–µ—Ç–æ–º valid_to –≥–¥–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
    now = timezone.now()
    active_alerts = (
        SpaceWeatherAlert.objects.filter(valid_to__gte=now).count() +
        TypeKGeomagneticAlert.objects.filter(valid_to__gte=now).count()
    )
    
    # –ù–µ–¥–∞–≤–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é)
    week_ago = now - timezone.timedelta(days=7)
    recent_alerts = (
        SpaceWeatherAlert.objects.filter(created_at__gte=week_ago).count() +
        TypeTRadioAlert.objects.filter(created_at__gte=week_ago).count() +
        TypeKGeomagneticAlert.objects.filter(created_at__gte=week_ago).count() +
        TypeEElectronAlert.objects.filter(created_at__gte=week_ago).count() +
        TypeAForecastAlert.objects.filter(created_at__gte=week_ago).count()
    )
    
    stats = {
        'total_alerts': total_alerts,
        'active_alerts': active_alerts,
        'recent_alerts': recent_alerts,
    }
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    from itertools import chain
    from operator import attrgetter
    
    t_alerts = list(TypeTRadioAlert.objects.all())
    k_alerts = list(TypeKGeomagneticAlert.objects.all()) 
    e_alerts = list(TypeEElectronAlert.objects.all())
    a_alerts = list(TypeAForecastAlert.objects.all())
    old_alerts = list(SpaceWeatherAlert.objects.all())
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    all_alerts = list(chain(t_alerts, k_alerts, e_alerts, a_alerts, old_alerts))
    all_alerts.sort(key=attrgetter('issue_time'), reverse=True)
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    alerts_list = all_alerts
    paginator = Paginator(alerts_list, 20)  # 20 –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page_number = request.GET.get('page')
    alerts = paginator.get_page(page_number)
    
    if request.method == 'POST':
        action = request.POST.get('action')
        
        if action == 'logout_admin':
            request.session['admin_authenticated'] = False
            from django.contrib import messages
            messages.success(request, '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.')
            return redirect('admin_alerts')
        
        elif action == 'load_alerts':
            return load_alerts_from_api(request)
        elif action == 'clear_alerts':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            clear_password = request.POST.get('clear_password', '')
            if clear_password != 'CLEAR_DB_2024':
                from django.contrib import messages
                messages.error(request, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!')
                return redirect('admin_alerts')
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            deleted_count = (
                SpaceWeatherAlert.objects.count() +
                TypeTRadioAlert.objects.count() +
                TypeKGeomagneticAlert.objects.count() +
                TypeEElectronAlert.objects.count() +
                TypeAForecastAlert.objects.count()
            )
            
            SpaceWeatherAlert.objects.all().delete()
            TypeTRadioAlert.objects.all().delete()
            TypeKGeomagneticAlert.objects.all().delete()
            TypeEElectronAlert.objects.all().delete()
            TypeAForecastAlert.objects.all().delete()
            
            messages.success(request, f'üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∞–ª–µ—Ä—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.')
            return redirect('admin_alerts')
        elif action == 'delete_alert':
            alert_id = request.POST.get('alert_id')
            try:
                alert = SpaceWeatherAlert.objects.get(id=alert_id)
                alert.delete()
                messages.success(request, '–ê–ª–µ—Ä—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.')
            except SpaceWeatherAlert.DoesNotExist:
                messages.error(request, '–ê–ª–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return redirect('admin_alerts')
    
    context = {
        'alerts': alerts,
        'stats': stats,
        'page_title': '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞–º–∏'
    }
    
    return render(request, 'admin_alerts.html', context)


def load_alerts_from_api(request):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–ª–µ—Ä—Ç—ã –∏–∑ NOAA API"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        response = requests.get('https://services.swpc.noaa.gov/products/alerts.json', timeout=10)
        response.raise_for_status()
        alerts_data = response.json()
        
        loaded_count = 0
        skipped_count = 0
        errors = []
        
        for alert_data in alerts_data:
            try:
                message = alert_data.get('message', '')
                if message:
                    parsed_data = parse_alert_message(alert_data)  # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ message
                    if parsed_data:
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API (issue_datetime)
                        if 'issue_datetime' in alert_data:
                            try:
                                # –ü–∞—Ä—Å–∏–º timestamp –∏–∑ API
                                issue_dt = datetime.strptime(alert_data['issue_datetime'], '%Y-%m-%d %H:%M:%S.%f')
                                parsed_data['issue_time_from_api'] = timezone.make_aware(issue_dt, timezone.utc)
                            except:
                                pass
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–ª–µ—Ä—Ç –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
                        message_code = parsed_data.get('message_code', '')
                        serial_number = parsed_data.get('serial_number', '')
                        
                        existing_alert = (
                            SpaceWeatherAlert.objects.filter(message_code=message_code, serial_number=serial_number).exists() or
                            TypeTRadioAlert.objects.filter(message_code=message_code, serial_number=serial_number).exists() or
                            TypeKGeomagneticAlert.objects.filter(message_code=message_code, serial_number=serial_number).exists() or
                            TypeEElectronAlert.objects.filter(message_code=message_code, serial_number=serial_number).exists() or
                            TypeAForecastAlert.objects.filter(message_code=message_code, serial_number=serial_number).exists()
                        )
                        
                        if existing_alert:
                            skipped_count += 1
                            continue
                        
                        # –ü–µ—Ä–µ–≤–æ–¥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ save_alert_to_db
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ)
                        saved_alert = save_alert_to_db(parsed_data)
                        if saved_alert:
                            loaded_count += 1
                    else:
                        # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                        try:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ API
                            product_id = alert_data.get('product_id', 'UNKNOWN')
                            issue_datetime = alert_data.get('issue_datetime', '')
                            
                            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
                            issue_time = timezone.now()
                            if issue_datetime:
                                try:
                                    issue_time = datetime.strptime(issue_datetime, '%Y-%m-%d %H:%M:%S.%f')
                                    issue_time = timezone.make_aware(issue_time, timezone.utc)
                                except:
                                    pass
                            
                            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ product_id –∏ –≤—Ä–µ–º–µ–Ω–∏
                            message_code = product_id
                            serial_number = str(int(issue_time.timestamp()))
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
                            existing = (
                                SpaceWeatherAlert.objects.filter(message_code=message_code, serial_number=serial_number).exists() or
                                TypeTRadioAlert.objects.filter(message_code=message_code, serial_number=serial_number).exists() or
                                TypeKGeomagneticAlert.objects.filter(message_code=message_code, serial_number=serial_number).exists() or
                                TypeEElectronAlert.objects.filter(message_code=message_code, serial_number=serial_number).exists() or
                                TypeAForecastAlert.objects.filter(message_code=message_code, serial_number=serial_number).exists()
                            )
                            
                            if existing:
                                skipped_count += 1
                                continue
                            
                            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è warning_type
                            translated_message = translate_space_weather_text(message[:200] + '...' if len(message) > 200 else message)
                            
                            # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç
                            alert = SpaceWeatherAlert.objects.create(
                                message_code=message_code,
                                serial_number=serial_number,
                                issue_time=issue_time,
                                warning_type=translated_message,
                                full_message=message,
                                warning_condition='API Import',
                                noaa_scale='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                                potential_impacts='–¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞',
                            )
                            
                            if alert:
                                loaded_count += 1
                                
                        except Exception as e2:
                            errors.append(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞: {str(e2)}")
                else:
                    errors.append("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–ª–µ—Ä—Ç–µ")
                    
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞: {str(e)}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        total_processed = len(alerts_data)
        
        if loaded_count > 0:
            messages.success(request, f'‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –∏–∑ NOAA API.')
        
        if skipped_count > 0:
            messages.info(request, f'‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count} –∞–ª–µ—Ä—Ç–æ–≤ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ).')
            
        if loaded_count == 0 and skipped_count == 0 and total_processed > 0:
            messages.warning(request, f'‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_processed} –∞–ª–µ—Ä—Ç–æ–≤ –∏–∑ API, –Ω–æ –Ω–æ–≤—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        elif total_processed == 0:
            messages.warning(request, '‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏–∫–∞–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤.')
            
        if errors:
            error_msg = f'‚ùå –í–æ–∑–Ω–∏–∫–ª–æ {len(errors)} –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:\n' + '\n'.join(errors[:5])
            if len(errors) > 5:
                error_msg += f'\n... –∏ –µ—â–µ {len(errors) - 5} –æ—à–∏–±–æ–∫'
            messages.error(request, error_msg)
            
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if total_processed > 0:
            messages.info(request, f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_processed}, –∑–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count}, –æ—à–∏–±–æ–∫ {len(errors)}')
            
    except requests.RequestException as e:
        messages.error(request, f'üåê –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NOAA API: {str(e)}')
    except Exception as e:
        messages.error(request, f'üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}')
    
    return redirect('admin_alerts')


def settings_view(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    if request.method == 'POST':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
        proxy_enabled = request.POST.get('proxy_enabled') == 'on'
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
        proxy_manager.toggle_proxy(proxy_enabled)
        
        if proxy_enabled:
            messages.success(request, '–ü—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
        else:
            messages.info(request, '–ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω.')
        
        return redirect('settings')
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    proxy_enabled = proxy_manager.get_proxy_status()
    proxy_list = proxy_manager.load_proxy_list()
    proxy_count = len(proxy_list)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    from itertools import chain
    from operator import attrgetter
    
    t_alerts = list(TypeTRadioAlert.objects.all()[:5])
    k_alerts = list(TypeKGeomagneticAlert.objects.all()[:5]) 
    e_alerts = list(TypeEElectronAlert.objects.all()[:5])
    a_alerts = list(TypeAForecastAlert.objects.all()[:5])
    old_alerts = list(SpaceWeatherAlert.objects.all()[:5])
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    all_alerts = list(chain(t_alerts, k_alerts, e_alerts, a_alerts, old_alerts))
    all_alerts.sort(key=attrgetter('issue_time'), reverse=True)
    recent_alerts = all_alerts[:10]
    
    context = {
        'title': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        'proxy_enabled': proxy_enabled,
        'proxy_list': proxy_list,
        'proxy_count': proxy_count,
        'recent_alerts': recent_alerts,
    }
    
    return render(request, 'settings.html', context)


@csrf_exempt
@require_http_methods(["POST"])
def test_connection(request):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    test_url = "https://httpbin.org/ip"
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        status, data = loop.run_until_complete(
            make_request_with_proxy(test_url, use_proxy=True)
        )
    finally:
        loop.close()

    if status == 200 and isinstance(data, dict) and 'origin' in data:
        return JsonResponse({
            'success': True,
            'message': f'–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! IP: {data["origin"]}',
            'ip': data['origin']
        })

    return JsonResponse({
        'success': False,
        'error': f'–û—à–∏–±–∫–∞ API: {status}',
        'details': str(data)
    })


def proxy_status_api(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∫—Å–∏"""
    proxy_enabled = proxy_manager.get_proxy_status()
    proxy_list = proxy_manager.load_proxy_list()
    
    return JsonResponse({
        'proxy_enabled': proxy_enabled,
        'proxy_count': len(proxy_list),
        'proxy_available': len(proxy_list) > 0
    })
